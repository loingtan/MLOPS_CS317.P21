version: '3.8'

# ML Weather Prediction API Monitoring Stack
services:
  # Prometheus - Metrics collection and storage
  # Web interface accessible at http://localhost:9090
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
      - --storage.tsdb.retention.time=7d
      - --web.enable-lifecycle
    networks:
      - monitoring-network
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
  
  # Node Exporter - System metrics collection
  # Collects host-level metrics for monitoring
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: node-exporter
    restart: always
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    expose:
      - 9100
    networks:
      - monitoring-network
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
  
  # Alertmanager - Handles alerts from Prometheus
  # Web interface accessible at http://localhost:9093
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: alertmanager
    restart: always
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - --config.file=/etc/alertmanager/alertmanager.yml
      - --storage.path=/alertmanager
    networks:
      - monitoring-network
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3

  # Grafana - Data visualization and dashboarding
  # Web interface accessible at http://localhost:3000
  # Default login: admin/admin
  grafana:
    image: grafana/grafana:10.1.5
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./grafana/dashboard-provider.yml:/etc/grafana/provisioning/dashboards/dashboard-provider.yml
      - ./grafana/dashboard.json:/var/lib/grafana/dashboards/dashboard.json
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - monitoring-network
    depends_on:
      - prometheus

  # Fluent Bit - Log collector and forwarder
  # Collects logs from system and application sources
  # Management interface accessible at http://localhost:2020
  fluent-bit:
    image: fluent/fluent-bit:2.1.9
    container_name: fluent-bit
    restart: always
    ports:
      - "2020:2020"
    volumes:
      - ./fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
      - ./fluent-bit/parsers.conf:/fluent-bit/etc/parsers.conf
      - ./app:/opt/app:ro
      - fluent_bit_data:/tmp
      - ./logs:/var/log/app:rw
    environment:
      - FLB_LOG_LEVEL=info
      - LOKI_USERNAME=
      - LOKI_PASSWORD=
      - LOKI_TENANT_ID=
    command:
      - /fluent-bit/bin/fluent-bit
      - -c
      - /fluent-bit/etc/fluent-bit.conf
      - -v
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - monitoring-network
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3
    depends_on:
      - loki

  # Loki - Log aggregation system
  # Collects and stores logs from various sources
  # Accessible through Grafana or directly at http://localhost:3100
  loki:
    image: grafana/loki:2.8.4
    container_name: loki
    restart: always
    ports:
      - "3100:3100"
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/local-config.yaml
      - ./loki/rules.yaml:/loki/rules/rules.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring-network
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 3

  # Weather Prediction API - FastAPI Application
  # Main application service with ML model for weather prediction
  # Accessible at http://localhost:5050
  # API documentation at http://localhost:5050/docs

networks:
  monitoring-network:
    driver: bridge

# Persistent volumes for data storage
volumes:
  # Stores metrics data from Prometheus
  prometheus_data:
  # Stores alert history and configurations
  alertmanager_data:
  # Stores Grafana dashboards, users, and other configurations
  grafana_data:
  # Stores Fluent Bit state and buffers
  fluent_bit_data:
  # Stores Loki data
  loki_data:
